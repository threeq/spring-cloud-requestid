buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
        springCloudVersion = 'Finchley.M8'
        springCloudStreamVersion = 'Elmhurst.RC3'

        junitJupiterVersion="5.1.0"
        junitPlatformVersion="1.1.0"
        junitVintageVersion="5.1.0"
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
        classpath("io.spring.gradle:dependency-management-plugin:1.0.4.RELEASE")
        classpath('org.junit.platform:junit-platform-gradle-plugin:1.0.0-RC3')
    }
}

group 'me.threeq'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url 'https://repo.spring.io/release/' }
    maven { url 'https://repo.spring.io/libs-milestone' }
    jcenter()
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-stream-dependencies:${springCloudStreamVersion}"
    }
}

dependencies {
    compileOnly('org.projectlombok:lombok')

    compile 'org.slf4j:slf4j-api'
    compile 'org.springframework:spring-web'
    compile 'io.github.openfeign:feign-core'
    compile 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
    compile('javax.servlet:javax.servlet-api')

    testCompile('org.awaitility:awaitility:3.1.0')

    testCompile('org.springframework.boot:spring-boot-starter-web')
    testCompile("org.springframework.boot:spring-boot-starter-test")

    testCompile("org.junit.jupiter:junit-jupiter-api")
    testCompile("org.junit.jupiter:junit-jupiter-engine")
    testCompile("org.junit.platform:junit-platform-engine")
    testCompile("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
    testCompile("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")
}


jar {
    enabled = true
}
bootJar {
    enabled = false
}

afterEvaluate {
    def junitPlatformTestTask = (JavaExec) project.tasks.getByName('junitPlatformTest')

    jacoco {
        toolVersion = "0.8.0"
        applyTo(junitPlatformTestTask)
        reportsDir = file("$buildDir/reports/jacoco")
    }

    project.task(type: JacocoReport, "jacocoJupTestReport") {
        executionData(junitPlatformTestTask)
        sourceSets(sourceSets.main)
        sourceDirectories = files(sourceSets.main.allSource.srcDirs)
        classDirectories = files(sourceSets.main.output)

        reports {
            xml.enabled false
            xml.destination file("${buildDir}/reports/jacoco/report.xml")
            html.enabled true
            html.destination file("${buildDir}/reports/jacoco/html")
        }
    }

    check.dependsOn jacocoJupTestReport
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

//如果希望gradle install，安装到.m2本地仓库，参考下面的内容
install {
    repositories.mavenInstaller {
        pom.version = "$project.version"
        pom.artifactId = "$project.name"
        pom.groupId = "$project.group"
    }
}

//上传到仓库
//uploadArchives {
//    project.gradle.projectsEvaluated {
//
//        repositories {
//            MavenDeployer {
//                def repo=""
//                def user=""
//                def pwd=""
//
//                repository(url: "${repo}") {
//                    authentication(userName: "${user}", password: "${pwd}")
//                }
//                pom.version = "$project.version"
//                pom.artifactId = "$project.name"
//                pom.groupId = "$project.group"
//            }
//        }
//    }
//}
